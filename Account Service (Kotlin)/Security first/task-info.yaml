type: edu
custom_name: Security first!
files:
- name: src/account/AccountServiceApplication.kt
  visible: true
  text: |-
    package account

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication

    @SpringBootApplication
    class AccountServiceApplication

    fun main(args: Array<String>) {
        runApplication<AccountServiceApplication>(*args)
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.datasource.url=jdbc:h2:file:../service_db
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=password

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false

    spring.jpa.show-sql=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
            classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
            classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

        implementation 'org.jetbrains.kotlin:kotlin-reflect'

        runtimeOnly 'com.h2database:h2'

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
  learner_created: false
- name: src/account/config/WebSecurityConfig.kt
  visible: true
  text: |-
    package account.config

    import org.springframework.security.config.annotation.web.builders.HttpSecurity
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter
    import org.springframework.security.config.http.SessionCreationPolicy
    import org.springframework.security.core.userdetails.UserDetailsService


    @EnableWebSecurity
    class AccountsSecurityConfig(
        private val userDetailsService: UserDetailsService
    ) : WebSecurityConfigurerAdapter() {

        @Throws(Exception::class)
        override fun configure(http: HttpSecurity) {
            http.authorizeRequests()
                .mvcMatchers("/api/auth/signup", "/actuator/shutdown").permitAll()
                .mvcMatchers("/api/security/**").hasRole("AUDITOR")
                .mvcMatchers("/api/empl/payment").hasAnyRole("ACCOUNTANT", "USER")
                .mvcMatchers("/api/acct/payments").hasRole("ACCOUNTANT")
                .mvcMatchers("/api/admin/**").hasRole("ADMINISTRATOR")
                .anyRequest().authenticated()
                .and()
                .csrf().disable().headers().frameOptions().disable()
                .and()
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        }

    }
  learner_created: false
- name: src/account/entity/User.kt
  visible: true
  text: |-
    package account.entity

    import com.fasterxml.jackson.annotation.JsonIgnore
    import javax.persistence.*

    @Entity
    @Table(name = "users")
    data class User (

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        val id: Long = 0,
        val name: String? = null,
        val lastname: String? = null,
        val email: String? = null,
        @JsonIgnore
        val password: String? = null,

    )
  learner_created: false
- name: src/account/repository/UserRepository.kt
  visible: true
  text: |-
    package account.repository

    import account.entity.User
    import org.springframework.data.jpa.repository.JpaRepository

    interface UserRepository: JpaRepository<User, Long> {
        fun findByEmail(email: String?): User?
    }
  learner_created: false
- name: src/account/service/UserService.kt
  visible: true
  text: |-
    package account.service

    import account.dto.UserDTO
    import account.entity.User
    import account.repository.UserRepository
    import org.springframework.stereotype.Service

    @Service
    class UserService(
        private val repository: UserRepository,
    )  {

        fun getUserByEmail(email: String?) = repository.findByEmail(email)

        fun save(user: UserDTO): User = repository.save(
            User(
                name = user.name,
                lastname = user.lastname,
                email = user.email,
                password = user.password
            )
        )

    }
  learner_created: false
- name: src/account/dto/SignUpRequest.kt
  visible: true
  text: |
    package account.dto

    import javax.validation.constraints.Email
    import javax.validation.constraints.NotEmpty
    import javax.validation.constraints.Pattern

    data class UserDTO(
        @field:NotEmpty
        val name: String,

        @field:NotEmpty
        val lastname: String,

        @field:NotEmpty
        @Email
        @field:Pattern(regexp = "^[A-Za-z0-9+_.-]+@acme\\.com$")
        val email: String? = null,

        @field:NotEmpty
        val password: String? = null
    )
  learner_created: false
- name: src/account/controller/AuthController.kt
  visible: true
  text: |
    package account.controller

    import account.dto.UserDTO
    import account.exception.UserExistException
    import account.repository.UserRepository
    import account.service.UserService
    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.*
    import org.springframework.web.context.request.WebRequest
    import java.time.LocalDateTime
    import javax.validation.Valid

    @RestController
    @RequestMapping("/api/auth")
    class AuthController(
        private val userRepository: UserRepository,
        private val userService: UserService,
    ) {

        @ExceptionHandler(UserExistException::class)
        fun handleUserExistException(e: UserExistException, request: WebRequest): ResponseEntity<String> {
            return ResponseEntity.badRequest().body("User exists!")
        }

        @PostMapping("/signup")
        fun signup(@Valid @RequestBody newUser: UserDTO): ResponseEntity<Any> {
            // Check if user with the given email already exists
            val userExists = userService.getUserByEmail(newUser.email)
            if (userExists != null) {
                val errorResponse = mapOf(
                    "timestamp" to LocalDateTime.now(),
                    "status" to HttpStatus.BAD_REQUEST.value(),
                    "error" to HttpStatus.BAD_REQUEST.reasonPhrase,
                    "message" to "User exist!",
                    "path" to "/api/auth/signup"
                )
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse)
            }

            // Create the user and save it to the database
            val savedUser = userService.save(newUser)

            // Create the response body
            val responseBody = mapOf(
                "id" to savedUser.id,
                "name" to savedUser.name,
                "lastname" to savedUser.lastname,
                "email" to savedUser.email
            )

            return ResponseEntity.status(HttpStatus.OK).body(responseBody)
        }

    }
  learner_created: false
- name: src/account/controller/EmplController.kt
  visible: true
  text: |-
    package account.controller

    import account.dto.LoginDTO
    import account.service.CustomUserDetails
    import account.service.CustomUserDetailsService
    import org.springframework.security.core.annotation.AuthenticationPrincipal
    import org.springframework.security.core.userdetails.UserDetails
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RequestMapping
    import org.springframework.web.bind.annotation.RestController

    @RestController
    @RequestMapping("/api/empl")
    class EmplController(
        private val customUserDetailsService: CustomUserDetailsService
    ) {

        @GetMapping("/payment")
        fun getPaymentInfo(@AuthenticationPrincipal userDetails: UserDetails): LoginDTO {
            val loggedInUser = userDetails as CustomUserDetails
            return LoginDTO(
                id = loggedInUser.getId(),
                name = loggedInUser.getName(),
                lastname = loggedInUser.getLastname(),
                email = loggedInUser.getEmail()
            )
        }
    }
  learner_created: false
- name: src/account/config/RestAuthenticationEntryPoint.kt
  visible: true
  text: |-
    package account.config

    import org.springframework.security.web.AuthenticationEntryPoint
    import org.springframework.security.core.AuthenticationException
    import javax.servlet.http.HttpServletRequest
    import javax.servlet.http.HttpServletResponse

    class RestAuthenticationEntryPoint : AuthenticationEntryPoint {

        override fun commence(
            request: HttpServletRequest,
            response: HttpServletResponse,
            authException: AuthenticationException,
        ) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.message)
        }
    }
  learner_created: false
- name: src/account/service/CustomUserDetailsService.kt
  visible: true
  text: |-
    package account.service

    import account.repository.UserRepository
    import org.springframework.security.core.userdetails.UserDetails
    import org.springframework.security.core.userdetails.UserDetailsService
    import org.springframework.security.core.userdetails.UsernameNotFoundException
    import org.springframework.stereotype.Service

    @Service
    class CustomUserDetailsService(
        private val userRepository: UserRepository
    ) : UserDetailsService {

        override fun loadUserByUsername(username: String): UserDetails {
            val user = userRepository.findByEmail(username)
                ?: throw UsernameNotFoundException("해당 이메일로 사용자를 찾을 수 없습니다: $username")

            return org.springframework.security.core.userdetails.User(
                user.email,
                user.password,
                emptyList()
            )
        }
    }
  learner_created: false
- name: src/account/dto/LoginDTO.kt
  visible: true
  text: |-
    package account.dto

    data class LoginDTO (
        val id: Long? = null,
        val name: String? = null,
        val lastname: String? = null,
        val email: String? = null,
    )
  learner_created: false
- name: src/account/service/CustomUserDetails.kt
  visible: true
  text: |
    package account.service

    import org.springframework.security.core.GrantedAuthority
    import org.springframework.security.core.userdetails.UserDetails

    class CustomUserDetails(
        private val id: Long,
        private val name: String,
        private val lastname: String,
        private val email: String,
        private val authorities: Collection<GrantedAuthority>
    ) : UserDetails {

        // Add getter methods for the private properties
        fun getId(): Long {
            return id
        }

        fun getName(): String {
            return name
        }

        fun getLastname(): String {
            return lastname
        }

        fun getEmail(): String {
            return email
        }

        override fun getAuthorities(): Collection<GrantedAuthority> {
            return authorities
        }

        override fun getPassword(): String {
            return password
        }

        override fun getUsername(): String {
            return email // You can use email as the username
        }

        override fun isAccountNonExpired(): Boolean {
            return true
        }

        override fun isAccountNonLocked(): Boolean {
            return true
        }

        override fun isCredentialsNonExpired(): Boolean {
            return true
        }

        override fun isEnabled(): Boolean {
            return true
        }
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplicationKt;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, String> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, String value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String paymentApi = "/api/empl/payment";
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();

      private final String jDShortPass1 = new TestReq().setProps("new_password", "o").toJson();
      private final String jDShortPass2 = new TestReq().setProps("new_password", "oM").toJson();
      private final String jDShortPass3 = new TestReq().setProps("new_password", "oMo").toJson();
      private final String jDShortPass4 = new TestReq().setProps("new_password", "oMoa").toJson();
      private final String jDShortPass5 = new TestReq().setProps("new_password", "oMoa3").toJson();
      private final String jDShortPass6 = new TestReq().setProps("new_password", "oMoa3V").toJson();
      private final String jDShortPass7 = new TestReq().setProps("new_password", "oMoa3Vv").toJson();
      private final String jDShortPass8 = new TestReq().setProps("new_password", "oMoa3Vvq").toJson();
      private final String jDShortPass9 = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDShortPass10 = new TestReq().setProps("new_password", "oMoa3Vvqno").toJson();
      private final String jDShortPass11 = new TestReq().setProps("new_password", "oMoa3VvqnoM").toJson();


      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      public AccountServiceTest() {
        super(AccountServiceApplicationKt.class, "../service_db.mv.db");
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
        HttpResponse response = post(api, body).basicAuth(login, pass).send();

        if (response.getStatusCode() == 404) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Endpoint not found!" + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @param login login
       * @param password password
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
        HttpResponse response = get(api).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(paymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + paymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", userJson.get("name").getAsString())
                          .value("lastname", userJson.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(userJson.get("email").getAsString()))));
        }
        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user, String answer) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String pass = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = post(api, body).basicAuth(login, pass).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", answer));
        }
        if (status == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", answer)
                          .value("path", "/api/auth/changepass")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + getPrettyJson(json) + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"),
              // Test user registration on signup api
              // Test user registration on signup api
              () -> testBreachedPass(signUpApi, "", "",
                      jDCorrectUser, "Sending password from breached list"),
              () -> testPostSignUpResponse(jDCorrectUser, 200),
              () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(jDCorrectUser),
              () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMusLower, 200),
              () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"),
              // Test authentication, positive tests
              () -> testUserRegistration(jDLower, 200, "User must login!"),
              () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMusLower, 200, "User must login!"),
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"),
              // Test authentication, negative tests
              () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),
              // Test changing password
              () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"),
              () -> testChangePassword(changePassApi, jDShortPass1, 400, jDCorrectUser,
                      "Password length must be 12 chars minimum!"),
              () -> testChangePassword(changePassApi, jDDuplicatePass, 400, jDCorrectUser,
                      "The passwords must be different!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass1, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass2, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass3, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass4, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass5, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass6, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass7, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass8, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass9, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass10, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass11, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"),
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"),
              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"JohnDoe@acme.com",
                      "oMoa3VvqnLxW", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"JohnDoe@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!"),
              () -> testChangePassword(changePassApi, jDPass, 200, maxMusCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"MaxMustermann@acme.com",
                      "ai0y9bMvyF6G", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"MaxMustermann@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!")
      };
    }
  learner_created: false
- name: src/account/dto/SignUpResponse.kt
  visible: true
  text: |-
    package account.dto

    data class SignUpResponse(
        val id: Long?,
        val name: String?,
        val lastname: String?,
        val email: String?
    )
  learner_created: true
- name: src/account/dto/ErrorResponse.kt
  visible: true
  text: |-
    package account.dto

    data class ErrorResponseDTO(
        val timestamp: String,
        val status: Int,
        val error: String,
        val message: String,
        val path: String
    )
  learner_created: true
- name: src/account/service/UserServiceImpl.kt
  visible: true
  text: |+
    package account.service

    import account.dto.SignUpRequest
    import account.entity.User
    import account.exception.UserAlreadyExistsException
    import account.repository.UserRepository
    import org.springframework.security.crypto.password.PasswordEncoder
    import org.springframework.stereotype.Service

    @Service
    class UserServiceImpl(
        private val userRepository: UserRepository,
        private val passwordEncoder: PasswordEncoder
    ): UserService {

        // 회원 가입을 처리하는 메서드
        override fun registerUser(signUpRequest: SignUpRequest): User {
            // 이미 등록된 이메일인지 검사
            val existingUser = userRepository.findByEmailIgnoreCase(signUpRequest.email)
            if (existingUser != null) {
                throw UserAlreadyExistsException("User exist!")
            }

            // 패스워드 암호화 먼저하고 회원 정보 생성. password를 reassign 할 수 없기 때문
            val encryptedPassword = passwordEncoder.encode(signUpRequest.password)

            // 회원 정보 생성
            val user = User(
                name = signUpRequest.name,
                lastname = signUpRequest.lastname,
                email = signUpRequest.email,
                password = encryptedPassword
            )

            // 회원 정보 저장 후 반환
            return userRepository.save(user)
        }
    }

  learner_created: true
- name: src/account/service/PasswordService.kt
  visible: true
  learner_created: true
- name: src/account/dto/ChangePasswordRequest.kt
  visible: true
  learner_created: true
- name: src/account/exception/GlobalExceptionHandler.kt
  visible: true
  learner_created: true
- name: src/account/exception/DateTimeFormatter.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/27098#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 29 Aug 2023 04:45:56 UTC"
record: 3
