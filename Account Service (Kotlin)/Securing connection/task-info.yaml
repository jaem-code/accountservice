type: edu
files:
- name: src/account/AccountServiceApplication.kt
  visible: true
  text: |-
    package account

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication

    @SpringBootApplication
    class AccountServiceApplication

    fun main(args: Array<String>) {
        runApplication<AccountServiceApplication>(*args)
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.datasource.url=jdbc:h2:file:../service_db
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=password

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false

    spring.jpa.show-sql=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
            classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
            classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

        implementation 'org.jetbrains.kotlin:kotlin-reflect'

        runtimeOnly 'com.h2database:h2'

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
  learner_created: false
- name: src/account/config/WebSecurityConfig.kt
  visible: true
  text: |-
    package account.config

    import org.springframework.security.config.annotation.web.builders.HttpSecurity
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter
    import org.springframework.security.config.http.SessionCreationPolicy
    import org.springframework.security.core.userdetails.UserDetailsService


    @EnableWebSecurity
    class AccountsSecurityConfig(
        private val userDetailsService: UserDetailsService
    ) : WebSecurityConfigurerAdapter() {

        @Throws(Exception::class)
        override fun configure(http: HttpSecurity) {
            http.authorizeRequests()
                .mvcMatchers("/api/auth/signup", "/actuator/shutdown").permitAll()
                .mvcMatchers("/api/security/**").hasRole("AUDITOR")
                .mvcMatchers("/api/empl/payment").hasAnyRole("ACCOUNTANT", "USER")
                .mvcMatchers("/api/acct/payments").hasRole("ACCOUNTANT")
                .mvcMatchers("/api/admin/**").hasRole("ADMINISTRATOR")
                .anyRequest().authenticated()
                .and()
                .csrf().disable().headers().frameOptions().disable()
                .and()
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        }

    }
  learner_created: false
- name: src/account/entity/User.kt
  visible: true
  text: |-
    package account.entity

    import com.fasterxml.jackson.annotation.JsonIgnore
    import javax.persistence.*

    @Entity
    @Table(name = "users")
    data class User (

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        val id: Long = 0,
        val name: String? = null,
        val lastname: String? = null,
        val email: String? = null,
        @JsonIgnore
        val password: String? = null,

    )
  learner_created: false
- name: src/account/repository/UserRepository.kt
  visible: true
  text: |-
    package account.repository

    import account.entity.User
    import org.springframework.data.jpa.repository.JpaRepository

    interface UserRepository: JpaRepository<User, Long> {
        fun findByEmail(email: String?): User?
    }
  learner_created: false
- name: src/account/service/UserService.kt
  visible: true
  text: |-
    package account.service

    import account.dto.UserDTO
    import account.entity.User
    import account.repository.UserRepository
    import org.springframework.stereotype.Service

    @Service
    class UserService(
        private val repository: UserRepository,
    )  {

        fun getUserByEmail(email: String?) = repository.findByEmail(email)

        fun save(user: UserDTO): User = repository.save(
            User(
                name = user.name,
                lastname = user.lastname,
                email = user.email,
                password = user.password
            )
        )

    }
  learner_created: false
- name: src/account/dto/SignUpRequest.kt
  visible: true
  text: |
    package account.dto

    import javax.validation.constraints.Email
    import javax.validation.constraints.NotEmpty
    import javax.validation.constraints.Pattern

    data class UserDTO(
        @field:NotEmpty
        val name: String,

        @field:NotEmpty
        val lastname: String,

        @field:NotEmpty
        @Email
        @field:Pattern(regexp = "^[A-Za-z0-9+_.-]+@acme\\.com$")
        val email: String? = null,

        @field:NotEmpty
        val password: String? = null
    )
  learner_created: false
- name: src/account/controller/AuthController.kt
  visible: true
  text: |
    package account.controller

    import account.dto.UserDTO
    import account.exception.UserExistException
    import account.repository.UserRepository
    import account.service.UserService
    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.*
    import org.springframework.web.context.request.WebRequest
    import java.time.LocalDateTime
    import javax.validation.Valid

    @RestController
    @RequestMapping("/api/auth")
    class AuthController(
        private val userRepository: UserRepository,
        private val userService: UserService,
    ) {

        @ExceptionHandler(UserExistException::class)
        fun handleUserExistException(e: UserExistException, request: WebRequest): ResponseEntity<String> {
            return ResponseEntity.badRequest().body("User exists!")
        }

        @PostMapping("/signup")
        fun signup(@Valid @RequestBody newUser: UserDTO): ResponseEntity<Any> {
            // Check if user with the given email already exists
            val userExists = userService.getUserByEmail(newUser.email)
            if (userExists != null) {
                val errorResponse = mapOf(
                    "timestamp" to LocalDateTime.now(),
                    "status" to HttpStatus.BAD_REQUEST.value(),
                    "error" to HttpStatus.BAD_REQUEST.reasonPhrase,
                    "message" to "User exist!",
                    "path" to "/api/auth/signup"
                )
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse)
            }

            // Create the user and save it to the database
            val savedUser = userService.save(newUser)

            // Create the response body
            val responseBody = mapOf(
                "id" to savedUser.id,
                "name" to savedUser.name,
                "lastname" to savedUser.lastname,
                "email" to savedUser.email
            )

            return ResponseEntity.status(HttpStatus.OK).body(responseBody)
        }

    }
  learner_created: false
- name: src/account/controller/EmplController.kt
  visible: true
  text: |-
    package account.controller

    import account.dto.LoginDTO
    import account.service.CustomUserDetails
    import account.service.CustomUserDetailsService
    import org.springframework.security.core.annotation.AuthenticationPrincipal
    import org.springframework.security.core.userdetails.UserDetails
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RequestMapping
    import org.springframework.web.bind.annotation.RestController

    @RestController
    @RequestMapping("/api/empl")
    class EmplController(
        private val customUserDetailsService: CustomUserDetailsService
    ) {

        @GetMapping("/payment")
        fun getPaymentInfo(@AuthenticationPrincipal userDetails: UserDetails): LoginDTO {
            val loggedInUser = userDetails as CustomUserDetails
            return LoginDTO(
                id = loggedInUser.getId(),
                name = loggedInUser.getName(),
                lastname = loggedInUser.getLastname(),
                email = loggedInUser.getEmail()
            )
        }
    }
  learner_created: false
- name: src/account/exception/UserExistException.kt
  visible: true
  text: |
    package account.exception

    import org.springframework.http.HttpStatus
    import org.springframework.web.bind.annotation.ResponseStatus

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User already exists")
    class UserExistException : RuntimeException()
  learner_created: false
- name: src/account/config/RestAuthenticationEntryPoint.kt
  visible: true
  text: |-
    package account.config

    import org.springframework.security.web.AuthenticationEntryPoint
    import org.springframework.security.core.AuthenticationException
    import javax.servlet.http.HttpServletRequest
    import javax.servlet.http.HttpServletResponse

    class RestAuthenticationEntryPoint : AuthenticationEntryPoint {

        override fun commence(
            request: HttpServletRequest,
            response: HttpServletResponse,
            authException: AuthenticationException,
        ) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.message)
        }
    }
  learner_created: false
- name: src/account/service/CustomUserDetailsService.kt
  visible: true
  text: |-
    package account.service

    import account.repository.UserRepository
    import org.springframework.security.core.userdetails.UserDetails
    import org.springframework.security.core.userdetails.UserDetailsService
    import org.springframework.security.core.userdetails.UsernameNotFoundException
    import org.springframework.stereotype.Service

    @Service
    class CustomUserDetailsService(
        private val userRepository: UserRepository
    ) : UserDetailsService {

        override fun loadUserByUsername(username: String): UserDetails {
            val user = userRepository.findByEmail(username)
                ?: throw UsernameNotFoundException("해당 이메일로 사용자를 찾을 수 없습니다: $username")

            return org.springframework.security.core.userdetails.User(
                user.email,
                user.password,
                emptyList()
            )
        }
    }
  learner_created: false
- name: src/account/dto/LoginDTO.kt
  visible: true
  text: |-
    package account.dto

    data class LoginDTO (
        val id: Long? = null,
        val name: String? = null,
        val lastname: String? = null,
        val email: String? = null,
    )
  learner_created: false
- name: src/account/service/CustomUserDetails.kt
  visible: true
  text: |
    package account.service

    import org.springframework.security.core.GrantedAuthority
    import org.springframework.security.core.userdetails.UserDetails

    class CustomUserDetails(
        private val id: Long,
        private val name: String,
        private val lastname: String,
        private val email: String,
        private val authorities: Collection<GrantedAuthority>
    ) : UserDetails {

        // Add getter methods for the private properties
        fun getId(): Long {
            return id
        }

        fun getName(): String {
            return name
        }

        fun getLastname(): String {
            return lastname
        }

        fun getEmail(): String {
            return email
        }

        override fun getAuthorities(): Collection<GrantedAuthority> {
            return authorities
        }

        override fun getPassword(): String {
            return password
        }

        override fun getUsername(): String {
            return email // You can use email as the username
        }

        override fun isAccountNonExpired(): Boolean {
            return true
        }

        override fun isAccountNonLocked(): Boolean {
            return true
        }

        override fun isCredentialsNonExpired(): Boolean {
            return true
        }

        override fun isEnabled(): Boolean {
            return true
        }
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplicationKt;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplicationKt.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/27102#comment
status: Unchecked
record: -1
